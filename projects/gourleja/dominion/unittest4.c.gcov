        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Jason Gourley
        -:    3: * gourleja@oregonstate.edu
        -:    4: * CS362-400
        -:    5: * Assignment 3 - unittest4.c
        -:    6: * Description : Unit tests for endTurn method
        -:    7: */
        -:    8:
        -:    9:#include <stdio.h>
        -:   10:#include <stdlib.h>
        -:   11:#include "dominion.h"
        -:   12:#include "rngs.h"
        -:   13:
        -:   14:#define METHODNAME  "endTurn"
        -:   15:#define BASESEED    10
        -:   16:
        -:   17:/*
        -:   18: * Description:     Test the return values of the endTurn method
        -:   19: * Preconditions:   The games state has been initialized, the seed and method name to test are passed
        -:   20: * Postconditions:  The general messages and any failed test messages are displayed
        -:   21: */
        1:   22:int testMethod(char* currentTest, int seed, struct gameState *state)
        -:   23:{
        -:   24:    int i;
        1:   25:    int testsPassed = 0;
        1:   26:    int testsFailed = 0;
        1:   27:    int expectedValue = 0;
        1:   28:    int expectedState = 0;
        -:   29:
        1:   30:    printf ("\n\n-------------------------------------------------------------------------------\n");
        1:   31:    printf ("-------------------------------------------------------------------------------\n");
        1:   32:    printf ("Testing Method  : %s()\n", currentTest);
        1:   33:    printf ("Seed            : %i\n", seed);
        -:   34:
        1:   35:    expectedValue = 0;
        1:   36:    state->whoseTurn = 0;
        1:   37:    endTurn(state);
        1:   38:    if(state->handCount[0] != expectedValue) {
    #####:   39:        printf("TEST FAIL    : Current player hand count reset failed\n");
    #####:   40:        testsFailed++;
        1:   41:    } else {testsPassed++;}
        -:   42:
        1:   43:    expectedValue = 0;
        1:   44:    endTurn(state);
        1:   45:    if(state->outpostPlayed != expectedValue) {
    #####:   46:        printf("TEST FAIL    : Outpost's Played reset failed\n");
    #####:   47:        testsFailed++;
        1:   48:    } else {testsPassed++;}
        -:   49:
        1:   50:    expectedValue = 0;
        1:   51:    endTurn(state);
        1:   52:    if(state->phase != expectedValue) {
    #####:   53:        printf("TEST FAIL    : Phase reset failed\n");
    #####:   54:        testsFailed++;
        1:   55:    } else {testsPassed++;}
        -:   56:
        1:   57:    expectedValue = 1;
        1:   58:    endTurn(state);
        1:   59:    if(state->numActions != expectedValue) {
    #####:   60:        printf("TEST FAIL    : Number of Actions reset failed\n");
    #####:   61:        testsFailed++;
        1:   62:    } else {testsPassed++;}
        -:   63:
        1:   64:    expectedValue = 1;
        1:   65:    endTurn(state);
        1:   66:    if(state->numBuys != expectedValue) {
    #####:   67:        printf("TEST FAIL    : Number of Buys value reset failed\n");
    #####:   68:        testsFailed++;
        1:   69:    } else {testsPassed++;}
        -:   70:
        1:   71:    expectedValue = 0;
        1:   72:    endTurn(state);
        1:   73:    if(state->playedCardCount != expectedValue) {
    #####:   74:        printf("TEST FAIL    : Played card count value reset failed\n");
    #####:   75:        testsFailed++;
        1:   76:    } else {testsPassed++;}
        -:   77:
        1:   78:    state->whoseTurn = 0;
        1:   79:    expectedValue = 1;
        1:   80:    endTurn(state);
        1:   81:    if(state->whoseTurn != expectedValue) {
    #####:   82:        printf("TEST FAIL    : Next player value reset failed\n");
    #####:   83:        testsFailed++;
        1:   84:    } else {testsPassed++;}
        -:   85:
        1:   86:    state->whoseTurn = 1;
        1:   87:    expectedValue = 0;
        1:   88:    endTurn(state);
        1:   89:    if(state->whoseTurn != expectedValue) {
    #####:   90:        printf("TEST FAIL    : Next player value reset failed\n");
    #####:   91:        testsFailed++;
        1:   92:    } else {testsPassed++;}
        -:   93:
        1:   94:    printf ("    Tests Passed    : %i\n", testsPassed);
        1:   95:    printf ("    Tests Failed    : %i\n", testsFailed);
        1:   96:    printf ("-------------------------------------------------------------------------------\n\n");
        -:   97:
        1:   98:    return 0;
        -:   99:}
        -:  100:
        -:  101:
        -:  102:/*
        -:  103: * Preconditions:   The user can pass a seed value for testing or it defaults to a set value
        -:  104: * Postconditions:  Exit the test program normally
        -:  105: */
        1:  106:int main (int argc, char** argv)
        -:  107:{
        -:  108:
        -:  109:    // Setup Game Seed
        -:  110:    int seed;
        1:  111:    char* currentTest = METHODNAME;
        1:  112:    if(argv[1]) {
    #####:  113:        seed = atoi(argv[1]);
        -:  114:    } else {
        1:  115:        seed = BASESEED;
        -:  116:    }
        -:  117:
        -:  118:    // Initialize Game State
        -:  119:    struct gameState G;
        1:  120:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:  121:    initializeGame(2, k, seed, &G);
        -:  122:
        1:  123:    testMethod(currentTest,seed, &G);
        1:  124:    return 0;
        -:  125:}
